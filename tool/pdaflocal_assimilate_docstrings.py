"""docstrings for PDAFlocal_assimilate_xxx functions
and PDAFlocal_put_state_xxx functions.

These functions are mostly deprecated.
"""
docstrings = {}

docstrings['local_assimilate_en3dvar_lestkf'] = \
    "It is recommended to use\n    "\
    ":func:`pyPDAF.PDAF.localomi_assimilate_en3dvar_lestkf`\n    "\
    "or :func:`pyPDAF.PDAF.localomi_assimilate_en3dvar_lestkf_nondiagR`.\n\n    "\
    "PDAF-OMI modules require fewer user-supplied functions\n    "\
    "and improved efficiency.\n\n    " \
    "3DEnVar for a single DA step where the ensemble anomaly\n    "\
    "is generated by LESTKF.\n    " \
    "The background error covariance matrix is estimated by ensemble.\n    " \
    "The 3DEnVar only calculates the analysis of the ensemble mean.\n    " \
    "An LESTKF is used to generate ensemble perturbations.\n    " \
    "This function should be called at each model time step.\n\n    " \
    "The function is a combination of\n    "\
    ":func:`pyPDAF.PDAF.local_put_state_en3dvar_lestkf`\n    " \
    "and :func:`pyPDAF.PDAF.get_state`.\n\n    " \
    "User-supplied functions are executed in the following sequence:\n    " \
    "    1. py__collect_state_pdaf\n    " \
    "    2. py__prepoststep_state_pdaf\n    " \
    "    3. py__init_dim_obs_pdaf\n    " \
    "    4. py__obs_op_pdaf\n    " \
    "    5. py__init_obs_pdaf\n    " \
    "    6. Starting the iterative optimisation:\n    " \
    "        1. py__cvt_ens_pdaf\n    " \
    "        2. py__obs_op_lin_pdaf\n    " \
    "        3. py__prodRinvA_pdaf\n    " \
    "        4. py__obs_op_adj_pdaf\n    " \
    "        5. py__cvt_adj_ens_pdaf\n    " \
    "        6. core DA algorithm\n    " \
    "    7. py__cvt_ens_pdaf\n    " \
    "    8. Perform LESTKF:\n    " \
    "        1. py__init_n_domains_p_pdaf\n    " \
    "        2. py__init_dim_obs_pdaf\n    " \
    "        3. py__obs_op_pdaf\n    "\
    "           (for each ensemble member)\n    " \
    "        4. py__init_obs_pdaf\n    "\
    "           (if global adaptive forgetting factor is used\n    "\
    "           `type_forget=1` in :func:`pyPDAF.PDAF.init`)\n    " \
    "        5. py__init_obsvar_pdaf\n    "\
    "           (if global adaptive forgetting factor is used)\n    " \
    "        6. loop over each local domain:\n    " \
    "            1. py__init_dim_l_pdaf\n    " \
    "            2. py__init_dim_obs_l_pdaf\n    " \
    "            3. py__g2l_obs_pdaf\n    "\
    "               (localise mean ensemble in observation space)\n    " \
    "            4. py__init_obs_l_pdaf\n    "\
    "            5. py__g2l_obs_pdaf\n    " \
    "               (localise each ensemble member in observation space)\n    " \
    "            6. py__init_obsvar_l_pdaf\n    " \
    "               (only called if local adaptive forgetting factor\n    " \
    "               `type_forget=2` is used)\n    "\
    "            7. py__prodRinvA_l_pdaf\n    " \
    "            8. core DA algorithm\n    " \
    "    9. py__prepoststep_state_pdaf\n    " \
    "    10. py__distribute_state_pdaf\n    " \
    "    11. py__next_observation_pdaf\n" \
    "\n    " \
    ".. deprecated:: 1.0.0\n\n    " \
    "   This function is replaced by\n    "\
    "   :func:`pyPDAF.PDAF.localomi_assimilate_en3dvar_lestkf`\n    " \
    "   and :func:`pyPDAF.PDAF.localomi_assimilate_en3dvar_lestkf_nondiagR`"
docstrings['local_assimilate_hyb3dvar_lestkf'] = \
    "It is recommended to use\n    "\
    ":func:`pyPDAF.PDAF.localomi_assimilate_hyb3dvar_lestkf`\n    "\
    "or :func:`pyPDAF.PDAF.localomi_assimilate_hyb3dvar_lestkf_nondiagR`.\n\n    "\
    "PDAF-OMI modules require fewer user-supplied functions\n    "\
    "and improved efficiency.\n\n    " \
    "Hybrid 3DEnVar for a single DA step where\n    " \
    "the background error covariance is hybridised by\n    "\
    "a static background error covariance,\n    " \
    "and a flow-dependent background error covariance\n    "\
    "estimated from ensemble.\n    " \
    "The 3DVar generates an ensemble mean and\n    "\
    "the ensemble perturbation is generated by\n    " \
    "LESTKF in this implementation.\n    " \
    "This function should be called at each model time step.\n\n    " \
    "The function is a combination of\n    "\
    ":func:`pyPDAF.PDAF.local_put_state_hyb3dvar_lestkf`\n    " \
    "and :func:`pyPDAF.PDAF.get_state`.\n\n    " \
    "User-supplied functions are executed in the following sequence:\n    " \
    "    1. py__collect_state_pdaf\n    " \
    "    2. py__prepoststep_state_pdaf\n    " \
    "    3. py__init_dim_obs_pdaf\n    " \
    "    4. py__obs_op_pdaf\n    " \
    "    5. py__init_obs_pdaf\n    " \
    "    6. The iterative optimisation:\n    " \
    "        1. py__cvt_pdaf\n    " \
    "        2. py__cvt_ens_pdaf\n    " \
    "        3. py__obs_op_lin_pdaf\n    " \
    "        4. py__prodRinvA_pdaf\n    " \
    "        5. py__obs_op_adj_pdaf\n    " \
    "        6. py__cvt_adj_pdaf\n    " \
    "        7. py__cvt_adj_ens_pdaf\n    " \
    "        8. core DA algorithm\n    " \
    "    7. py__cvt_pdaf\n    " \
    "    8. py__cvt_ens_pdaf\n    " \
    "    9. Perform LESTKF:\n    " \
    "        1. py__init_n_domains_p_pdaf\n    " \
    "        2. py__init_dim_obs_pdaf\n    " \
    "        3. py__obs_op_pdaf\n    " \
    "           (for each ensemble member)\n    " \
    "        4. py__init_obs_pdaf\n    " \
    "           (if global adaptive forgetting factor\n    "\
    "           `type_forget=1` in :func:`pyPDAF.PDAF.init`)\n    " \
    "        5. py__init_obsvar_pdaf\n    " \
    "           (if global adaptive forgetting factor is used)\n    " \
    "        6. loop over each local domain:\n    " \
    "            1. py__init_dim_l_pdaf\n    " \
    "            2. py__init_dim_obs_l_pdaf\n    " \
    "            3. py__g2l_obs_pdaf\n    "\
    "               (localise mean ensemble in observation space)\n    " \
    "            4. py__init_obs_l_pdaf\n    "\
    "            5. py__g2l_obs_pdaf\n    " \
    "               (localise each ensemble member\n    "\
    "               in observation space)\n    " \
    "            6. py__init_obsvar_l_pdaf\n    " \
    "               (only called if local adaptive forgetting\n    "\
    "               factor `type_forget=2` is used)\n    "\
    "            7. py__prodRinvA_l_pdaf\n    " \
    "            8. core DA algorithm\n    " \
    "    10. py__prepoststep_state_pdaf\n    " \
    "    11. py__distribute_state_pdaf\n    " \
    "    12. py__next_observation_pdaf\n" \
    "\n    " \
    ".. deprecated:: 1.0.0\n\n    " \
    "   This function is replaced by\n    "\
    "   :func:`pyPDAF.PDAF.localomi_assimilate_hyb3dvar_lestkf`\n    " \
    "   and :func:`pyPDAF.PDAF.localomi_assimilate_hyb3dvar_lestkf_nondiagR`"
docstrings['local_assimilate_lestkf'] = \
    "It is recommended to use\n    "\
    ":func:`pyPDAF.PDAF.localomi_assimilate`\n    "\
    "or :func:`pyPDAF.PDAF.localomi_assimilate_nondiagR`.\n\n    "\
    "PDAFlocal-OMI modules require fewer user-supplied\n    "\
    "functions and improved efficiency.\n\n    " \
    "Local ESTKF (error space transform " \
    "Kalman filter) [1]_ for a single DA step without OMI.\n    " \
    "The LESTKF is a more efficient equivalent to the LETKF.\n\n    " \
    "This function should be called at each model time step.\n    " \
    "The function is a combination of\n    "\
    ":func:`pyPDAF.PDAF.local_put_state_lestkf`\n    " \
    "and :func:`pyPDAF.PDAF.get_state`.\n\n    " \
    "User-supplied functions are executed in the following sequence:\n    " \
    "    1. py__collect_state_pdaf\n    "\
    "    2. py__prepoststep_state_pdaf\n    "\
    "    3. py__init_n_domains_p_pdaf\n    "\
    "    4. py__init_dim_obs_pdaf\n    "\
    "    5. py__obs_op_pdaf (for each ensemble member)\n    "\
    "    6. py__init_obs_pdaf\n    " \
    "       (if global adaptive forgetting factor\n    "\
    "       `type_forget=1` is used\n    " \
    "       in :func:`pyPDAF.PDAF.init`)\n    "\
    "    7. py__init_obsvar_pdaf (if global adaptive\n    "\
    "       forgetting factor is used)\n    "\
    "    8. loop over each local domain:\n    " \
    "        1. py__init_dim_l_pdaf\n    "\
    "        2. py__init_dim_obs_l_pdaf\n    "\
    "        3. py__g2l_obs_pdaf (localise mean ensemble\n    "\
    "           in observation space)\n    "\
    "        4. py__init_obs_l_pdaf\n    " \
    "        5. py__g2l_obs_pdaf\n    "\
    "           (localise each ensemble member\n    "\
    "           in observation space)\n    "\
    "        6. py__init_obsvar_l_pdaf\n    " \
    "           (only called if local adaptive forgetting\n    "\
    "           factor `type_forget=2` is used)\n    " \
    "        7. py__prodRinvA_l_pdaf\n    "\
    "        8. core DA algorithm\n    " \
    "    9. py__prepoststep_state_pdaf\n    "\
    "    10. py__distribute_state_pdaf\n    "\
    "    11. py__next_observation_pdaf\n" \
    "\n    " \
    ".. deprecated:: 1.0.0\n\n    " \
    "   This function is replaced by\n    "\
    "   :func:`pyPDAF.PDAF.localomi_assimilate`\n    " \
    "   and :func:`pyPDAF.PDAF.localomi_assimilate_nondiagR`" \
    "\n\n    " \
    "References\n    " \
    "----------\n    " \
    ".. [1] Nerger, L., Janjić, T., Schröter, J., Hiller, W. (2012). \n    " \
    "       A unification of ensemble square root Kalman filters. \n    " \
    "       Monthly Weather Review, 140, 2335-2345. doi:10.1175/MWR-D-11-00102.1"
docstrings['local_assimilate_letkf'] = \
    "It is recommended to use\n    "\
    ":func:`pyPDAF.PDAF.localomi_assimilate`\n    "\
    "or :func:`pyPDAF.PDAF.localomi_assimilate_nondiagR`.\n\n    "\
    "PDAFlocal-OMI modules require fewer user-supplied\n    "\
    "functions and improved efficiency.\n\n    " \
    "Local ensemble transform Kalman filter (LETKF) [1]_ " \
    "for a single DA step without OMI.\n    "\
    "Implementation is based on [2]_.\n    " \
    "Note that the LESTKF is a more efficient equivalent to the LETKF.\n\n    " \
    "This function should be called at each model time step.\n    " \
    "The function is a combination of\n    "\
    ":func:`pyPDAF.PDAF.local_put_state_letkf`\n    " \
    "and :func:`pyPDAF.PDAF.get_state`.\n\n    " \
    "User-supplied functions are executed in the following sequence:\n    " \
    "    1. py__collect_state_pdaf\n    "\
    "    2. py__prepoststep_state_pdaf\n    "\
    "    3. py__init_n_domains_p_pdaf\n    "\
    "    4. py__init_dim_obs_pdaf\n    "\
    "    5. py__obs_op_pdaf (for each ensemble member)\n    "\
    "    6. py__init_obs_pdaf\n    " \
    "       (if global adaptive forgetting factor\n    "\
    "       `type_forget=1` is used\n    " \
    "       in :func:`pyPDAF.PDAF.init`)\n    "\
    "    7. py__init_obsvar_pdaf (if global adaptive\n    "\
    "       forgetting factor is used)\n    "\
    "    8. loop over each local domain:\n    " \
    "        1. py__init_dim_l_pdaf\n    "\
    "        2. py__init_dim_obs_l_pdaf\n    "\
    "        3. py__g2l_obs_pdaf (localise mean ensemble\n    "\
    "           in observation space)\n    "\
    "        4. py__init_obs_l_pdaf\n    " \
    "        5. py__g2l_obs_pdaf (localise each ensemble member\n    "\
    "           in observation space)\n    "\
    "        6. py__init_obsvar_l_pdaf\n    " \
    "           (only called if local adaptive forgetting\n    "\
    "           factor `type_forget=2` is used)\n    " \
    "        7. py__prodRinvA_l_pdaf\n    "\
    "        8. core DA algorithm\n    " \
    "    9. py__prepoststep_state_pdaf\n    "\
    "    10. py__distribute_state_pdaf\n    "\
    "    11. py__next_observation_pdaf\n" \
    "\n    " \
    ".. deprecated:: 1.0.0\n\n    " \
    "   This function is replaced by\n    "\
    "   :func:`pyPDAF.PDAF.localomi_assimilate`\n    " \
    "   and :func:`pyPDAF.PDAF.localomi_assimilate_nondiagR`" \
    "\n\n    " \
    "References\n    " \
    "----------\n    " \
    ".. [1] Hunt, B. R., Kostelich, E. J., & Szunyogh, I. (2007).\n    "\
    "       Efficient data assimilation for spatiotemporal chaos:\n    "\
    "       A local ensemble transform Kalman filter. \n    "\
    "       Physica D: Nonlinear Phenomena, 230(1-2), 112-126.\n    " \
    ".. [2] Nerger, L., Janjić, T., Schröter, J., Hiller, W. (2012). \n    " \
    "       A unification of ensemble square root Kalman filters. \n    " \
    "       Monthly Weather Review, 140, 2335-2345.\n    "\
    "       doi:10.1175/MWR-D-11-00102.1"
docstrings['local_assimilate_lseik'] = \
    "It is recommended to use\n    "\
    ":func:`pyPDAF.PDAF.localomi_assimilate`\n    "\
    "or :func:`pyPDAF.PDAF.localomi_assimilate_nondiagR`.\n\n    "\
    "PDAF-OMI modules require fewer user-supplied functions\n    "\
    "and improved efficiency.\n\n    " \
    "Local singular evolutive interpolated Kalman filter [1]_\n    "\
    "for a single DA step.\n    " \
    "This function should be called at each model time step.\n\n    " \
    "The function is a combination of\n    "\
    ":func:`pyPDAF.PDAF.local_put_state_lseik` " \
    "and :func:`pyPDAF.PDAF.get_state`\n\n    "\
    "User-supplied functions are executed in the following sequence:\n    " \
    "    1. py__collect_state_pdaf\n    " \
    "    2. py__prepoststep_state_pdaf\n    " \
    "    3. py__init_n_domains_p_pdaf\n    " \
    "    4. py__init_dim_obs_pdaf\n    " \
    "    5. py__obs_op_pdaf (for each ensemble member)\n    " \
    "    6. py__init_obs_pdaf\n    "\
    "       (if global adaptive forgetting factor `type_forget=1`\n    " \
    "       is used in :func:`pyPDAF.PDAF.init`)\n    " \
    "    7. py__init_obsvar_pdaf\n    "\
    "       (if global adaptive forgetting factor is used)\n    " \
    "    8. loop over each local domain:\n    " \
    "        1. py__init_dim_l_pdaf\n    " \
    "        2. py__init_dim_obs_l_pdaf\n    " \
    "        3. py__g2l_obs_pdaf (localise mean ensemble\n    "\
    "           in observation space)\n    " \
    "        4. py__init_obs_l_pdaf\n    "\
    "        5. py__g2l_obs_pdaf\n    "\
    "           (localise each ensemble member in observation space)\n    " \
    "        6. py__init_obsvar_l_pdaf\n    "\
    "           (only called if local adaptive forgetting factor\n    "\
    "           `type_forget=2` is used)\n    "\
    "        7. py__prodRinvA_l_pdaf\n    " \
    "        8. core DA algorithm\n    " \
    "    9. py__prepoststep_state_pdaf\n    " \
    "    10. py__distribute_state_pdaf\n    " \
    "    11. py__next_observation_pdaf\n" \
    "\n    " \
    ".. deprecated:: 1.0.0\n\n    " \
    "   This function is replaced by\n    "\
    "   :func:`pyPDAF.PDAF.localomi_assimilate`\n    " \
    "   and :func:`pyPDAF.PDAF.localomi_assimilate_nondiagR`" \
    "\n\n    " \
    "References\n    " \
    "----------\n    " \
    ".. [1] Pham, D. T., Verron, J., & Roubaud, M. C. (1998).\n    "\
    "       A singular evolutive extended Kalman filter\n    "\
    "       for data assimilation\n    "\
    "       in oceanography. Journal of Marine systems, 16(3-4), 323-340."
docstrings['local_assimilate_lnetf'] = \
    "It is recommended to use\n    "\
    ":func:`pyPDAF.PDAF.localomi_assimilate`\n    "\
    "or :func:`pyPDAF.PDAF.localomi_assimilate_lnetf_nondiagR`.\n\n    "\
    "PDAF-OMI modules require fewer user-supplied functions\n    "\
    "and improved efficiency.\n\n    " \
    "Local Nonlinear Ensemble Transform Filter (LNETF) [1]_\n    "\
    "for a single DA step.\n    " \
    "The nonlinear filter computes the distribution up to\n    " \
    "the second moment similar to Kalman filters\n    "\
    "but it uses a nonlinear weighting similar to\n    " \
    "particle filters. This leads to an equal weights\n    "\
    "assumption for the prior ensemble at each step.\n    " \
    "This function should be called at each model time step.\n\n    " \
    "The function is a combination of\n    "\
    ":func:`pyPDAF.PDAF.local_put_state_lnetf`\n    " \
    "and :func:`pyPDAF.PDAF.get_state`.\n\n    " \
    "User-supplied functions are executed in the following sequence:\n    " \
    "    1. py__collect_state_pdaf\n    " \
    "    2. py__prepoststep_state_pdaf\n    " \
    "    3. py__init_n_domains_p_pdaf\n    " \
    "    4. py__init_dim_obs_pdaf\n    " \
    "    5. py__obs_op_pdaf (for each ensemble member)\n    " \
    "    6. loop over each local domain:\n    " \
    "        1. py__init_dim_l_pdaf\n    " \
    "        2. py__init_dim_obs_l_pdaf\n    " \
    "        3. py__init_obs_l_pdaf\n    "\
    "        4. py__g2l_obs_pdaf (localise each ensemble member\n    "\
    "           in observation space)\n    " \
    "        5. py__likelihood_l_pdaf\n    " \
    "        6. core DA algorithm\n    " \
    "    7. py__prepoststep_state_pdaf\n    " \
    "    8. py__distribute_state_pdaf\n    " \
    "    9. py__next_observation_pdaf\n" \
    "\n    " \
    ".. deprecated:: 1.0.0\n\n    " \
    "   This function is replaced by\n    "\
    "   :func:`pyPDAF.PDAF.localomi_assimilate`\n    " \
    "   and :func:`pyPDAF.PDAF.localomi_assimilate_lnetf_nondiagR`" \
    "\n\n    " \
    "References\n    " \
    "----------\n    " \
    ".. [1] Tödter, J., and B. Ahrens, 2015:\n    "\
    "       A second-order exact ensemble square root filter\n    " \
    "       for nonlinear data assimilation. Mon. Wea. Rev.,\n    " \
    "       143, 1347–1367, doi:10.1175/MWR-D-14-00108.1."
docstrings['local_assimilate_lknetf'] = \
    "It is recommended to use\n    "\
    ":func:`pyPDAF.PDAF.localomi_assimilate`\n    "\
    "or :func:`pyPDAF.PDAF.localomi_assimilate_lknetf_nondiagR`.\n\n    "\
    "PDAF-OMI modules require fewer user-supplied functions\n    "\
    "and improved efficiency.\n\n    " \
    "A hybridised LETKF and LNETF [1]_ for a single DA step.\n    " \
    "The LNETF computes the distribution up to\n    " \
    "the second moment similar to Kalman filters\n    "\
    "but using a nonlinear weighting similar to\n    " \
    "particle filters. This leads to an equal weights\n    "\
    "assumption for the prior ensemble.\n    " \
    "The hybridisation with LETKF is expected to\n    "\
    "lead to improved performance for\n    " \
    "quasi-Gaussian problems.\n    " \
    "The function should be called at each model step.\n\n    " \
    "The function is a combination of\n    "\
    ":func:`pyPDAF.PDAF.local_put_state_lknetf`\n    " \
    "and :func:`pyPDAF.PDAF.get_state`.\n\n    " \
    "User-supplied functions are executed in the following sequence:\n    " \
    "    1. py__collect_state_pdaf\n    " \
    "    2. py__prepoststep_state_pdaf\n    " \
    "    3. py__init_n_domains_p_pdaf\n    " \
    "    4. py__init_dim_obs_pdaf\n    " \
    "    5. py__obs_op_pdaf\n    "\
    "       (for each ensemble member)\n    " \
    "    6. py__init_obs_pdaf\n    " \
    "       (if global adaptive forgetting factor `type_forget=1`\n    "\
    "       is used in :func:`pyPDAF.PDAF.init`)\n    " \
    "    7. py__init_obsvar_pdaf (if global adaptive\n    "\
    "       forgetting factor is used)\n    " \
    "    8. loop over each local domain:\n    " \
    "        1. py__init_dim_l_pdaf\n    " \
    "        2. py__init_dim_obs_l_pdaf\n    " \
    "        3. py__g2l_obs_pdaf\n    "\
    "           (localise each ensemble member in observation space)\n    " \
    "        4. py__init_obs_l_pdaf\n    "\
    "        5. py__init_obsvar_l_pdaf\n    "\
    "           (only called if local adaptive forgetting\n    "\
    "           factor `type_forget=2` is used)\n    "\
    "        6. py__prodRinvA_pdaf\n    " \
    "        7. py__likelihood_l_pdaf\n    " \
    "        8. core DA algorithm\n    " \
    "    9. py__obs_op_pdaf\n    " \
    "       (only called with `HKN` and `HNK` options called\n    "\
    "       for each ensemble member)\n    " \
    "    10. py__likelihood_hyb_l_pda\n    " \
    "    11. py__init_obsvar_l_pdaf\n    " \
    "        (only called if local adaptive forgetting factor\n    "\
    "        `type_forget=2` is used)\n    "\
    "    12. py__prodRinvA_hyb_l_pdaf\n    " \
    "    13. py__prepoststep_state_pdaf\n    " \
    "    14. py__distribute_state_pdaf\n    " \
    "    15. py__next_observation_pdaf\n" \
    "\n    " \
    ".. deprecated:: 1.0.0\n\n    " \
    "   This function is replaced by\n    "\
    "   :func:`pyPDAF.PDAF.localomi_assimilate`\n    " \
    "   and :func:`pyPDAF.PDAF.localomi_assimilate_lknetf_nondiagR`" \
    "\n\n    " \
    "References\n    " \
    "----------\n    " \
    ".. [1] Nerger, L.. (2022) \n    " \
    "       Data assimilation for nonlinear systems with\n    "\
    "       a hybrid nonlinear Kalman ensemble transform filter. \n    " \
    "       Q J R Meteorol Soc, 620–640. doi:10.1002/qj.4221"

docstrings['local_put_state_en3dvar_lestkf'] = \
    "It is recommended to use\n    "\
    ":func:`pyPDAF.PDAF.localomi_put_state_en3dvar_lestkf`\n    "\
    "or :func:`pyPDAF.PDAF.localomi_put_state_en3dvar_lestkf_nondiagR`.\n\n    "\
    "PDAF-OMI modules require fewer user-supplied functions\n    "\
    "and improved efficiency.\n\n    " \
    "3DEnVar for a single DA step without post-processing,\n    "\
    "distributing analysis, and setting next observation step,\n    "\
    "where the ensemble anomaly is generated by LESTKF.\n\n    " \
    "Compared to\n    "\
    ":func:`pyPDAF.PDAF.local_assimilate_en3dvar_lestkf`,\n    "\
    "this function has no :func:`get_state` call.\n    " \
    "This means that the analysis is not post-processed,\n    "\
    "and distributed to the model forecast\n    " \
    "by user-supplied functions. The next DA step will\n    "\
    "not be assigned by user-supplied functions as well.\n    " \
    "This function is typically used when there are\n    "\
    "not enough CPUs to run the ensemble in parallel,\n    "\
    "and some ensemble members have to be run serially.\n    "\
    "The :func:`pyPDAF.PDAF.get_state` function follows this\n    "\
    "function call to ensure the sequential DA.\n\n    " \
    "The background error covariance matrix is estimated by ensemble.\n    " \
    "The 3DEnVar only calculates the analysis of the ensemble mean.\n    " \
    "An LESTKF is used to generate ensemble perturbations.\n    " \
    "This function should be called at each model time step.\n\n    " \
    "User-supplied functions are executed in the following sequence:\n    " \
    "    1. py__collect_state_pdaf\n    " \
    "    2. py__prepoststep_state_pdaf\n    " \
    "    3. py__init_dim_obs_pdaf\n    " \
    "    4. py__obs_op_pdaf\n    " \
    "    5. py__init_obs_pdaf\n    " \
    "    6. Starting the iterative optimisation:\n    " \
    "        1. py__cvt_ens_pdaf\n    " \
    "        2. py__obs_op_lin_pdaf\n    " \
    "        3. py__prodRinvA_pdaf\n    " \
    "        4. py__obs_op_adj_pdaf\n    " \
    "        5. py__cvt_adj_ens_pdaf\n    " \
    "        6. core DA algorithm\n    " \
    "    7. py__cvt_ens_pdaf\n    " \
    "    8. Perform LESTKF:\n    " \
    "        1. py__init_n_domains_p_pdaf\n    " \
    "        2. py__init_dim_obs_pdaf\n    " \
    "        3. py__obs_op_pdaf\n    "\
    "           (for each ensemble member)\n    " \
    "        4. py__init_obs_pdaf\n    "\
    "           (if global adaptive forgetting factor is used\n    "\
    "           `type_forget=1` in :func:`pyPDAF.PDAF.init`)\n    " \
    "        5. py__init_obsvar_pdaf\n    "\
    "           (if global adaptive forgetting factor is used)\n    " \
    "        6. loop over each local domain:\n    " \
    "            1. py__init_dim_l_pdaf\n    " \
    "            2. py__init_dim_obs_l_pdaf\n    " \
    "            3. py__g2l_obs_pdaf\n    "\
    "               (localise mean ensemble in observation space)\n    " \
    "            4. py__init_obs_l_pdaf\n    "\
    "            5. py__g2l_obs_pdaf\n    " \
    "               (localise each ensemble member in observation space)\n    " \
    "            6. py__init_obsvar_l_pdaf\n    " \
    "               (only called if local adaptive forgetting factor\n    " \
    "               `type_forget=2` is used)\n    "\
    "            7. py__prodRinvA_l_pdaf\n    " \
    "            8. core DA algorithm\n" \
    "\n    " \
    ".. deprecated:: 1.0.0\n\n    " \
    "   This function is replaced by\n    "\
    "   :func:`pyPDAF.PDAF.localomi_put_state_en3dvar_lestkf`\n    " \
    "   and :func:`pyPDAF.PDAF.localomi_put_state_en3dvar_lestkf_nondiagR`"
docstrings['local_put_state_hyb3dvar_lestkf'] = \
    "It is recommended to use\n    "\
    ":func:`pyPDAF.PDAF.localomi_put_state_hyb3dvar_lestkf`\n    "\
    "or :func:`pyPDAF.PDAF.localomi_put_state_hyb3dvar_lestkf_nondiagR`.\n\n    "\
    "PDAF-OMI modules require fewer user-supplied functions\n    "\
    "and improved efficiency.\n\n    " \
    "Hybrid 3DEnVar for a single DA step using\n    "\
    "non-diagnoal observation error covariance matrix\n    " \
    "without post-processing, distributing analysis,\n    "\
    "and setting next observation step, where\n    " \
    "the background error covariance is hybridised by\n    "\
    "a static background error covariance,\n    " \
    "and a flow-dependent background error covariance\n    "\
    "estimated from ensemble.\n\n    " \
    "Compared to\n    "\
    ":func:`pyPDAF.PDAF.local_assimilate_hyb3dvar_lestkf`,\n    "\
    "this function has no :func:`get_state` call.\n    " \
    "This means that the analysis is not post-processed,\n    "\
    "and distributed to the model forecast\n    " \
    "by user-supplied functions. The next DA step will\n    "\
    "not be assigned by user-supplied functions as well.\n    " \
    "This function is typically used when there are\n    "\
    "not enough CPUs to run the ensemble in parallel,\n    "\
    "and some ensemble members have to be run serially.\n    "\
    "The :func:`pyPDAF.PDAF.get_state` function follows this\n    "\
    "function call to ensure the sequential DA.\n\n    " \
    "The 3DVar generates an ensemble mean and\n    "\
    "the ensemble perturbation is generated by\n    " \
    "LESTKF in this implementation.\n    " \
    "This function should be called at each model time step.\n\n    " \
    "User-supplied functions are executed in the following sequence:\n    " \
    "    1. py__collect_state_pdaf\n    " \
    "    2. py__prepoststep_state_pdaf\n    " \
    "    3. py__init_dim_obs_pdaf\n    " \
    "    4. py__obs_op_pdaf\n    " \
    "    5. py__init_obs_pdaf\n    " \
    "    6. The iterative optimisation:\n    " \
    "        1. py__cvt_pdaf\n    " \
    "        2. py__cvt_ens_pdaf\n    " \
    "        3. py__obs_op_lin_pdaf\n    " \
    "        4. py__prodRinvA_pdaf\n    " \
    "        5. py__obs_op_adj_pdaf\n    " \
    "        6. py__cvt_adj_pdaf\n    " \
    "        7. py__cvt_adj_ens_pdaf\n    " \
    "        8. core DA algorithm\n    " \
    "    7. py__cvt_pdaf\n    " \
    "    8. py__cvt_ens_pdaf\n    " \
    "    9. Perform LESTKF:\n    " \
    "        1. py__init_n_domains_p_pdaf\n    " \
    "        2. py__init_dim_obs_pdaf\n    " \
    "        3. py__obs_op_pdaf\n    " \
    "           (for each ensemble member)\n    " \
    "        4. py__init_obs_pdaf\n    " \
    "           (if global adaptive forgetting factor\n    "\
    "           `type_forget=1` in :func:`pyPDAF.PDAF.init`)\n    " \
    "        5. py__init_obsvar_pdaf\n    " \
    "           (if global adaptive forgetting factor is used)\n    " \
    "        6. loop over each local domain:\n    " \
    "            1. py__init_dim_l_pdaf\n    " \
    "            2. py__init_dim_obs_l_pdaf\n    " \
    "            3. py__g2l_obs_pdaf\n    "\
    "               (localise mean ensemble in observation space)\n    " \
    "            4. py__init_obs_l_pdaf\n    "\
    "            5. py__g2l_obs_pdaf\n    " \
    "               (localise each ensemble member\n    "\
    "               in observation space)\n    " \
    "            6. py__init_obsvar_l_pdaf\n    " \
    "               (only called if local adaptive forgetting\n    "\
    "               factor `type_forget=2` is used)\n    "\
    "            7. py__prodRinvA_l_pdaf\n    " \
    "            8. core DA algorithm\n" \
    "\n    " \
    ".. deprecated:: 1.0.0\n\n    " \
    "   This function is replaced by\n    "\
    "   :func:`pyPDAF.PDAF.localomi_put_state_hyb3dvar_lestkf`\n    " \
    "   and :func:`pyPDAF.PDAF.localomi_put_state_hyb3dvar_lestkf_nondiagR`"
docstrings['local_put_state_lestkf'] = \
    "It is recommended to use\n    "\
    ":func:`pyPDAF.PDAF.localomi_put_state`\n    "\
    "or :func:`pyPDAF.PDAF.localomi_put_state_nondiagR`.\n\n    "\
    "PDAFlocal-OMI modules require fewer\n    "\
    "user-supplied functions and improved efficiency.\n\n    " \
    "Local ESTKF (error space transform " \
    "Kalman filter) [1]_ for a single DA step without OMI.\n\n    " \
    "Compared to :func:`pyPDAF.PDAF.local_assimilate_lestkf`,\n    "\
    "this function has no :func:`get_state` call.\n    " \
    "This means that the analysis is not post-processed,\n    "\
    "and distributed to the model forecast\n    " \
    "by user-supplied functions. The next DA step will\n    "\
    "not be assigned by user-supplied functions as well.\n    " \
    "This function is typically used when there are\n    "\
    "not enough CPUs to run the ensemble in parallel,\n    "\
    "and some ensemble members have to be run serially.\n    "\
    "The :func:`pyPDAF.PDAF.get_state` function follows this\n    "\
    "function call to ensure the sequential DA.\n\n    " \
    "The LESTKF is a more efficient equivalent to the LETKF.\n\n    " \
    "This function should be called at each model time step.\n\n    " \
    "User-supplied functions are executed in the following sequence:\n    " \
    "    1. py__collect_state_pdaf\n    "\
    "    2. py__prepoststep_state_pdaf\n    "\
    "    3. py__init_n_domains_p_pdaf\n    "\
    "    4. py__init_dim_obs_pdaf\n    "\
    "    5. py__obs_op_pdaf (for each ensemble member)\n    "\
    "    6. py__init_obs_pdaf\n    " \
    "       (if global adaptive forgetting factor\n    "\
    "       `type_forget=1` is used\n    " \
    "       in :func:`pyPDAF.PDAF.init`)\n    "\
    "    7. py__init_obsvar_pdaf (if global adaptive\n    "\
    "       forgetting factor is used)\n    "\
    "    8. loop over each local domain:\n    " \
    "        1. py__init_dim_l_pdaf\n    "\
    "        2. py__init_dim_obs_l_pdaf\n    "\
    "        3. py__g2l_obs_pdaf (localise mean ensemble\n    "\
    "           in observation space)\n    "\
    "        4. py__init_obs_l_pdaf\n    " \
    "        5. py__g2l_obs_pdaf\n    "\
    "           (localise each ensemble member\n    "\
    "           in observation space)\n    "\
    "        6. py__init_obsvar_l_pdaf\n    " \
    "           (only called if local adaptive forgetting\n    "\
    "           factor `type_forget=2` is used)\n    " \
    "        7. py__prodRinvA_l_pdaf\n    "\
    "        8. core DA algorithm\n" \
    "\n    " \
    ".. deprecated:: 1.0.0\n\n    " \
    "   This function is replaced by\n    "\
    "   :func:`pyPDAF.PDAF.localomi_put_state`\n    " \
    "   and :func:`pyPDAF.PDAF.localomi_put_state_nondiagR`" \
    "\n\n    " \
    "References\n    " \
    "----------\n    " \
    ".. [1] Nerger, L., Janjić, T., Schröter, J., Hiller, W. (2012). \n    " \
    "       A unification of ensemble square root Kalman filters. \n    " \
    "       Monthly Weather Review, 140, 2335-2345.\n    "\
    "       doi:10.1175/MWR-D-11-00102.1"
docstrings['local_put_state_letkf'] = \
    "It is recommended to use\n    "\
    ":func:`pyPDAF.PDAF.localomi_put_state`\n    "\
    "or :func:`pyPDAF.PDAF.localomi_put_state_nondiagR`.\n\n    "\
    "PDAFlocal-OMI modules require fewer user-supplied\n    "\
    "functions and improved efficiency.\n\n    " \
    "Local ensemble transform Kalman filter (LETKF) [1]_\n    " \
    "for a single DA step without OMI. Implementation is\n    "\
    "based on [2]_.\n\n    " \
    "Compared to :func:`pyPDAF.PDAF.local_assimilate_letkf`,\n    "\
    "this function has no :func:`get_state` call.\n    " \
    "This means that the analysis is not post-processed,\n    "\
    "and distributed to the model forecast\n    " \
    "by user-supplied functions. The next DA step will\n    "\
    "not be assigned by user-supplied functions as well.\n    " \
    "This function is typically used when there are\n    "\
    "not enough CPUs to run the ensemble in parallel,\n    "\
    "and some ensemble members have to be run serially.\n    "\
    "The :func:`pyPDAF.PDAF.get_state` function follows this\n    "\
    "function call to ensure the sequential DA.\n\n    " \
    "Note that the LESTKF is a more efficient equivalent to the LETKF.\n\n    " \
    "This function should be called at each model time step.\n\n    " \
    "User-supplied functions are executed in the following sequence:\n    " \
    "    1. py__collect_state_pdaf\n    "\
    "    2. py__prepoststep_state_pdaf\n    "\
    "    3. py__init_n_domains_p_pdaf\n    "\
    "    4. py__init_dim_obs_pdaf\n    "\
    "    5. py__obs_op_pdaf (for each ensemble member)\n    "\
    "    6. py__init_obs_pdaf\n    " \
    "       (if global adaptive forgetting factor\n    "\
    "       `type_forget=1` is used\n    " \
    "       in :func:`pyPDAF.PDAF.init`)\n    "\
    "    7. py__init_obsvar_pdaf (if global adaptive\n    "\
    "       forgetting factor is used)\n    "\
    "    8. loop over each local domain:\n    " \
    "        1. py__init_dim_l_pdaf\n    "\
    "        2. py__init_dim_obs_l_pdaf\n    "\
    "        3. py__g2l_obs_pdaf (localise mean ensemble\n    "\
    "           in observation space)\n    "\
    "        4. py__init_obs_l_pdaf\n    " \
    "        5. py__g2l_obs_pdaf (localise each ensemble member\n    "\
    "           in observation space)\n    "\
    "        6. py__init_obsvar_l_pdaf\n    " \
    "           (only called if local adaptive forgetting\n    "\
    "           factor `type_forget=2` is used)\n    " \
    "        7. py__prodRinvA_l_pdaf\n    "\
    "        8. core DA algorithm\n" \
    "\n    " \
    ".. deprecated:: 1.0.0\n\n    " \
    "   This function is replaced by\n    "\
    "   :func:`pyPDAF.PDAF.localomi_put_state`\n    " \
    "   and :func:`pyPDAF.PDAF.localomi_put_state_nondiagR`" \
    "\n\n    " \
    "References\n    " \
    "----------\n    " \
    ".. [1] Hunt, B. R., Kostelich, E. J., & Szunyogh, I. (2007).\n    "\
    "       Efficient data assimilation for spatiotemporal chaos:\n    "\
    "       A local ensemble transform Kalman filter. \n    "\
    "       Physica D: Nonlinear Phenomena, 230(1-2), 112-126.\n    " \
    ".. [2] Nerger, L., Janjić, T., Schröter, J., Hiller, W. (2012). \n    " \
    "       A unification of ensemble square root Kalman filters. \n    " \
    "       Monthly Weather Review, 140, 2335-2345.\n    "\
    "       doi:10.1175/MWR-D-11-00102.1"
docstrings['local_put_state_lseik'] = \
    "It is recommended to use\n    "\
    ":func:`pyPDAF.PDAF.localomi_put_state`\n    "\
    "or :func:`pyPDAF.PDAF.localomi_put_state_nondiagR`.\n\n    "\
    "PDAF-OMI modules require fewer user-supplied functions\n    "\
    "and improved efficiency.\n\n    " \
    "Local singular evolutive interpolated Kalman filter [1]_\n    "\
    "for a single DA step.\n\n    " \
    "Compared to :func:`pyPDAF.PDAF.local_assimilate_lseik`,\n    "\
    "this function has no :func:`get_state` call.\n    " \
    "This means that the analysis is not post-processed,\n    "\
    "and distributed to the model forecast\n    " \
    "by user-supplied functions. The next DA step will\n    "\
    "not be assigned by user-supplied functions as well.\n    " \
    "This function is typically used when there are\n    "\
    "not enough CPUs to run the ensemble in parallel,\n    "\
    "and some ensemble members have to be run serially.\n    "\
    "The :func:`pyPDAF.PDAF.get_state` function follows this\n    "\
    "function call to ensure the sequential DA.\n\n    " \
    "This function should be called at each model time step.\n\n    " \
    "User-supplied functions are executed in the following sequence:\n    " \
    "    1. py__collect_state_pdaf\n    " \
    "    2. py__prepoststep_state_pdaf\n    " \
    "    3. py__init_n_domains_p_pdaf\n    " \
    "    4. py__init_dim_obs_pdaf\n    " \
    "    5. py__obs_op_pdaf (for each ensemble member)\n    " \
    "    6. py__init_obs_pdaf\n    "\
    "       (if global adaptive forgetting factor `type_forget=1`\n    " \
    "       is used in :func:`pyPDAF.PDAF.init`)\n    " \
    "    7. py__init_obsvar_pdaf\n    "\
    "       (if global adaptive forgetting factor is used)\n    " \
    "    8. loop over each local domain:\n    " \
    "        1. py__init_dim_l_pdaf\n    " \
    "        2. py__init_dim_obs_l_pdaf\n    " \
    "        3. py__g2l_obs_pdaf (localise mean ensemble\n    "\
    "           in observation space)\n    " \
    "        4. py__init_obs_l_pdaf\n    "\
    "        5. py__g2l_obs_pdaf\n    "\
    "           (localise each ensemble member in observation space)\n    " \
    "        6. py__init_obsvar_l_pdaf\n    "\
    "           (only called if local adaptive forgetting\n    "\
    "           factor `type_forget=2` is used)\n    "\
    "        7. py__prodRinvA_l_pdaf\n    " \
    "        8. core DA algorithm\n    " \
    "\n    " \
    ".. deprecated:: 1.0.0\n\n    " \
    "   This function is replaced by\n    "\
    "   :func:`pyPDAF.PDAF.localomi_put_state`\n    " \
    "   and :func:`pyPDAF.PDAF.localomi_put_state_nondiagR`" \
    "\n\n    " \
    "References\n    " \
    "----------\n    " \
    ".. [1] Pham, D. T., Verron, J., & Roubaud, M. C. (1998).\n    "\
    "       A singular evolutive extended Kalman filter\n    "\
    "       for data assimilation\n    "\
    "       in oceanography. Journal of Marine systems, 16(3-4), 323-340."
docstrings['local_put_state_lnetf'] = \
    "It is recommended to use\n    "\
    ":func:`pyPDAF.PDAF.localomi_put_state`\n    "\
    "or :func:`pyPDAF.PDAF.localomi_put_state_lnetf_nondiagR`.\n\n    "\
    "PDAF-OMI modules require fewer user-supplied functions\n    "\
    "and improved efficiency.\n\n    " \
    "Local Nonlinear Ensemble Transform Filter (LNETF) [1]_\n    "\
    "for a single DA step.\n\n    " \
    "Compared to :func:`pyPDAF.PDAF.local_assimilate_lnetf`,\n    "\
    "this function has no :func:`get_state` call.\n    " \
    "This means that the analysis is not post-processed,\n    "\
    "and distributed to the model forecast\n    " \
    "by user-supplied functions. The next DA step will\n    "\
    "not be assigned by user-supplied functions as well.\n    " \
    "This function is typically used when there are\n    "\
    "not enough CPUs to run the ensemble in parallel,\n    "\
    "and some ensemble members have to be run serially.\n    "\
    "The :func:`pyPDAF.PDAF.get_state` function follows this\n    "\
    "function call to ensure the sequential DA.\n\n    " \
    "The nonlinear filter computes the distribution up to\n    " \
    "the second moment similar to Kalman filters\n    "\
    "but it uses a nonlinear weighting similar to\n    " \
    "particle filters. This leads to an equal weights\n    "\
    "assumption for the prior ensemble at each step.\n    " \
    "This function should be called at each model time step.\n\n    " \
    "User-supplied functions are executed in the following sequence:\n    " \
    "    1. py__collect_state_pdaf\n    " \
    "    2. py__prepoststep_state_pdaf\n    " \
    "    3. py__init_n_domains_p_pdaf\n    " \
    "    4. py__init_dim_obs_pdaf\n    " \
    "    5. py__obs_op_pdaf (for each ensemble member)\n    " \
    "    6. loop over each local domain:\n    " \
    "        1. py__init_dim_l_pdaf\n    " \
    "        2. py__init_dim_obs_l_pdaf\n    " \
    "        3. py__init_obs_l_pdaf\n    "\
    "        4. py__g2l_obs_pdaf (localise each ensemble member\n    "\
    "           in observation space)\n    " \
    "        5. py__likelihood_l_pdaf\n    " \
    "        6. core DA algorithm\n" \
    "\n    " \
    ".. deprecated:: 1.0.0\n\n    " \
    "   This function is replaced by\n    "\
    "   :func:`pyPDAF.PDAF.localomi_put_state`\n    " \
    "   and :func:`pyPDAF.PDAF.localomi_put_state_lnetf_nondiagR`" \
    "\n\n    " \
    "References\n    " \
    "----------\n    " \
    ".. [1] Tödter, J., and B. Ahrens, 2015:\n    "\
    "       A second-order exact ensemble square root filter\n    " \
    "       for nonlinear data assimilation. Mon. Wea. Rev.,\n    " \
    "       143, 1347–1367, doi:10.1175/MWR-D-14-00108.1."
docstrings['local_put_state_lknetf'] = \
    "It is recommended to use\n    "\
    ":func:`pyPDAF.PDAF.localomi_put_state`\n    "\
    "or :func:`pyPDAF.PDAF.localomi_put_state_lknetf_nondiagR`.\n\n    "\
    "PDAF-OMI modules require fewer user-supplied functions\n    "\
    "and improved efficiency.\n\n    " \
    "A hybridised LETKF and LNETF [1]_ for a single DA step.\n\n    " \
    "Compared to :func:`pyPDAF.PDAF.local_assimilate_lknetf`,\n    "\
    "this function has no :func:`get_state` call.\n    " \
    "This means that the analysis is not post-processed,\n    "\
    "and distributed to the model forecast\n    " \
    "by user-supplied functions. The next DA step will\n    "\
    "not be assigned by user-supplied functions as well.\n    " \
    "This function is typically used when there are\n    "\
    "not enough CPUs to run the ensemble in parallel,\n    "\
    "and some ensemble members have to be run serially.\n    "\
    "The :func:`pyPDAF.PDAF.get_state` function follows this\n    "\
    "function call to ensure the sequential DA.\n\n    " \
    "The LNETF computes the distribution up to\n    " \
    "the second moment similar to Kalman filters\n    "\
    "but using a nonlinear weighting similar to\n    " \
    "particle filters. This leads to an equal weights\n    "\
    "assumption for the prior ensemble.\n    " \
    "The hybridisation with LETKF is expected to\n    "\
    "lead to improved performance for\n    " \
    "quasi-Gaussian problems.\n    " \
    "The function should be called at each model step.\n\n    " \
    "User-supplied functions are executed in the following sequence:\n    " \
    "    1. py__collect_state_pdaf\n    " \
    "    2. py__prepoststep_state_pdaf\n    " \
    "    3. py__init_n_domains_p_pdaf\n    " \
    "    4. py__init_dim_obs_pdaf\n    " \
    "    5. py__obs_op_pdaf\n    "\
    "       (for each ensemble member)\n    " \
    "    6. py__init_obs_pdaf\n    " \
    "       (if global adaptive forgetting factor `type_forget=1`\n    "\
    "       is used in :func:`pyPDAF.PDAF.init`)\n    " \
    "    7. py__init_obsvar_pdaf (if global adaptive\n    "\
    "       forgetting factor is used)\n    " \
    "    8. loop over each local domain:\n    " \
    "        1. py__init_dim_l_pdaf\n    " \
    "        2. py__init_dim_obs_l_pdaf\n    " \
    "        3. py__g2l_obs_pdaf\n    "\
    "           (localise each ensemble member\n    "\
    "           in observation space)\n    " \
    "        4. py__init_obs_l_pdaf\n    "\
    "        5. py__init_obsvar_l_pdaf\n    "\
    "           (only called if local adaptive forgetting\n    "\
    "           factor `type_forget=2` is used)\n    "\
    "        6. py__prodRinvA_pdaf\n    " \
    "        7. py__likelihood_l_pdaf\n    " \
    "        8. core DA algorithm\n    " \
    "    9. py__obs_op_pdaf\n    " \
    "       (only called with `HKN` and `HNK` options\n    "\
    "       called for each ensemble member)\n    " \
    "    10. py__likelihood_hyb_l_pda\n    " \
    "    11. py__init_obsvar_l_pdaf\n    " \
    "        (only called if local adaptive forgetting\n    "\
    "        factor `type_forget=2` is used)\n    "\
    "    12. py__prodRinvA_hyb_l_pdaf\n" \
    "\n    " \
    ".. deprecated:: 1.0.0\n\n    " \
    "   This function is replaced by\n    "\
    "   :func:`pyPDAF.PDAF.localomi_put_state`\n    " \
    "   and :func:`pyPDAF.PDAF.localomi_put_state_lknetf_nondiagR`" \
    "\n\n    " \
    "References\n    " \
    "----------\n    " \
    ".. [1] Nerger, L.. (2022)\n    " \
    "       Data assimilation for nonlinear systems with\n    "\
    "       a hybrid nonlinear Kalman ensemble transform filter." \
    "\n    " \
    "       Q J R Meteorol Soc, 620–640. doi:10.1002/qj.4221"
